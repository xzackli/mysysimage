precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s664, #s663} where #s663<:Integer where #s664<:Integer, AbstractString})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#25#30")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#26#31")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#27#32")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#28#33")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#29#34")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(PyCall.pythonenv), Base.Cmd})
precompile(Tuple{typeof(PyCall.find_libpython), String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cstring}, String})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){Int32, UInt8}, Type{Int32}, Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Nothing, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._pyimport), String})
precompile(Tuple{Type{PyCall.PyError}, String})
precompile(Tuple{typeof(PyCall.pyimport), String})
precompile(Tuple{typeof(PyCall.pydecref_), PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall.pyexc_initialize)})
precompile(Tuple{typeof(PyCall._handle_error), String})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.hash), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.convert), Type{String}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Nothing})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.PyTypeObject!), getfield(PyCall, Symbol("#129#130")){Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, PyCall.PyTypeObject, String, Int64})
precompile(Tuple{typeof(PyCall.pyjlwrap_init)})
precompile(Tuple{typeof(PyCall.pyhasproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, String})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#66#67")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Base.SubString{String}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(VersionParsing.vparse), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pysequence_query), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pyeval_), String, PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyDict{String, PyCall.PyObject, true}, Int64, String})
precompile(Tuple{typeof(PyCall.pyeval_), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Base.setindex!), PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#118#119")){Module}})
precompile(Tuple{typeof(Base.get!), getfield(PyCall, Symbol("#118#119")){Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(PyPlot.find_backend), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyPlot.init_colormaps)})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Conda._quiet)})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{String}}})
precompile(Tuple{typeof(Conda._installer_url)})
precompile(Tuple{typeof(Base.download_url), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#549")), Nothing, Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.:(^)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(^)), String, PyCall.PyObject})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.print_to_string), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pystring), PyCall.PyObject})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PyCall.PyObject})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{typeof(Base.download_curl), String, String, String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Filesystem.abspath), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sys.which), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{String}}})
precompile(Tuple{typeof(Base.download), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#chmod##kw")), NamedTuple{(:recursive,), Tuple{Bool}}, typeof(Base.Filesystem.chmod), String, Int64})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##chmod#25")), Bool, typeof(Base.Filesystem.chmod), String, Int64})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Conda.add_channel), String, String})
precompile(Tuple{typeof(Conda.add_channel), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Conda.runconda), Base.Cmd})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Conda._install_conda), String, Bool})
precompile(Tuple{typeof(Conda._install_conda), String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.Cmd}}})
precompile(Tuple{typeof(Base.iterate), Base.EnvDict, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, String}, Base.EnvDict})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.byteenv), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.byteenv), Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:env, :dir), Tuple{Array{String, 1}, String}}, Type{Base.Cmd}, Base.Cmd})
precompile(Tuple{typeof(Conda._set_conda_env), Base.Cmd, String})
precompile(Tuple{typeof(Conda.runconda), Base.Cmd, String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Conda, Symbol("##add#1")), String, typeof(Conda.add), String, String})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, String}, 1}, Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Symbol}, Symbol, String})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.insert!), Array{Tuple{Symbol, String}, 1}, Int64, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(PyCall.pyexists), String})
precompile(Tuple{typeof(PyCall.pygui_works), Symbol})
precompile(Tuple{typeof(PyCall.pydecref_), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(PyCall.pygui), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(PyCall.wx_eventloop), Float64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Timer}, Base.Timer, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_requireversion), String, Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_eventloop), String, Float64})
precompile(Tuple{typeof(PyCall.Tk_eventloop), Float64})
precompile(Tuple{typeof(PyCall.fixqtpath), String})
precompile(Tuple{typeof(PyCall.qt_eventloop), PyCall.PyObject, Float64})
precompile(Tuple{typeof(PyCall.qt_eventloop), Float64})
precompile(Tuple{typeof(PyCall.pygui_start), Symbol, Float64})
precompile(Tuple{typeof(PyCall.is_mapping_object), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, false}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, false}, String, String})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.:(==)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type{T} where T})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyTypeObject}})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Function, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Function})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Int64, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Int64}, Base.Generator{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Bool})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#3#4")){PyCall.PyObject, PyCall.PyObject, PyCall.PyObject, PyCall.PyObject}, Base.Timer})
precompile(Tuple{getfield(Base, Symbol("#504#505")){getfield(PyCall, Symbol("#3#4")){PyCall.PyObject, PyCall.PyObject, PyCall.PyObject, PyCall.PyObject}, Base.Timer}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#30#32")){REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.commit_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.:(>)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#163")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.SearchState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#12")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#38")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("#48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyMethodDef}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Ptr{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Ptr{PyCall.PyObject_struct}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyMethodDef}, String, Ptr{Nothing}, UInt16, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{typeof(PyCall.npyinitialize)})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Float64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyAny}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{getfield(PyPlot, Symbol("##figure#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.figure)})
precompile(Tuple{typeof(PyPlot.gcf)})
precompile(Tuple{typeof(PyPlot.figure)})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.Figure}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyreturn), PyPlot.Figure})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyarray_dims), PyCall.PyObject, Bool})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{PyCall.PyObject}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PyCall.PyObject, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PyCall.PyObject, 1}, PyCall.PyObject, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Array{PyCall.PyObject, 1}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Array{PyCall.PyObject, 1}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{PyCall.PyObject, 1}, Bool}})
precompile(Tuple{typeof(Base.getindex), LaTeXStrings.LaTeXString, Base.UnitRange{Int64}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.print_response), REPL.AbstractREPL, Any, Bool, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{PyCall.PyObject, 1}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{PyCall.PyObject, 1}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Base.Multimedia.MIME{Symbol("text/plain")}, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Base.IOContext{REPL.Terminals.TTYTerminal}, Int64, typeof(Base.sprint), Function, PyCall.PyObject})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#253#257")){REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_up), Any})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.history_move_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString, Bool, Any})
precompile(Tuple{typeof(REPL.history_move), Union{REPL.LineEdit.MIState, REPL.LineEdit.PrefixSearchState}, REPL.REPLHistoryProvider, Int64, Int64})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#238#246")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.history_next_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#239#247")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{typeof(Base.read), Base.Filesystem.File, Type{Char}})
precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{K, V} where V where K, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.update_key_repeats), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Random._rand_max383!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.CloseOpen01{Float64}})
precompile(Tuple{typeof(Random.DSFMT.dsfmt_fill_array_close_open!), Random.DSFMT.DSFMT_state, Ptr{Float64}, Int64})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Random.UnsafeView{Float64}, Random.SamplerTrivial{Random.CloseOpen01{Float64}, Float64}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{Type{PyCall.PyBuffer}, PyCall.PyObject, Int32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}, Int64})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{Array{Float64, N} where N, Array{Float64, N} where N, Array{T, N} where N where T}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{Array{Float64, N} where N, Array{Float64, N} where N, Array{T, N} where N where T}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Array{Float64, N} where N, Array{Float64, N} where N, Array{T, N} where N where T}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(>=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.istuplen), Type{T} where T, Bool, Int64})
precompile(Tuple{typeof(PyCall.tuptype), DataType, Bool, Int64})
precompile(Tuple{Type{PyCall.PyArray_Info{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#9#10")){PyCall.PyBuffer}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#9#10")){PyCall.PyBuffer}}, Int64})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 1}}, Bool, Tuple{Int64}, Tuple{Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.aligned), PyCall.PyArray_Info{Float64, 1}})
precompile(Tuple{Type{PyCall.PyArray{Float64, 1}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 1}})
precompile(Tuple{typeof(Base.copy), PyCall.PyArray{Float64, 1}})
precompile(Tuple{typeof(Base._unaliascopy), PyCall.PyArray{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), PyCall.PyArray{Float64, 1}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, PyCall.PyArray{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), PyCall.PyArray{Float64, 1}, Tuple{Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, PyCall.PyArray{Float64, 1}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 1}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Float64, Bool, Bool})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{Float64, 1}, Char, Char})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{REPL.Terminals.TTYTerminal}, Array{PyCall.PyObject, 1}, Char, Char})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{REPL.Terminals.TTYTerminal}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{REPL.Terminals.TTYTerminal}, Any})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Nothing})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, Any} where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, Any} where K, 1}, Tuple{Base.Dict{Any, Any}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(REPL.LineEdit.keymap), Array{#s664, N} where N where #s664<:(Base.Dict{K, V} where V where K)})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(REPL.LineEdit.normalize_keys), Base.Dict{K, V} where V where K})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(REPL.LineEdit.normalize_key), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.keymap_unify), Any})
precompile(Tuple{typeof(REPL.LineEdit.keymap_merge), Any, Any})
precompile(Tuple{typeof(Base.filter), getfield(REPL.LineEdit, Symbol("#30#31")), Base.Dict{Any, Any}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##add_nested_key!#21")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#add_nested_key!##kw")), Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#2#27")), String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL.Prompt.get_prompt), Any})
precompile(Tuple{typeof(Base.fill!), Array{Crayons.Crayon, 1}, Crayons.Crayon})
precompile(Tuple{typeof(OhMyREPL.apply_passes!), OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64, Bool})
precompile(Tuple{typeof(OhMyREPL.Prompt.rewrite_with_ANSI), Any, Bool})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#2#27")), Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Tokenize.Tokens.Token}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Tokenize.Lexers.readchar), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.emit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind, Tokenize.Tokens.TokenError})
precompile(Tuple{typeof(Tokenize.Lexers.lex_comment), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_prime), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.dotop2), Char, Char})
precompile(Tuple{typeof(Tokenize.Lexers.is_operator_start_char), UInt32})
precompile(Tuple{typeof(Tokenize.Lexers.accept_number), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, typeof(Tokenize.Lexers.ishex)})
precompile(Tuple{typeof(Tokenize.Lexers.lex_digit), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_dot), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.readrest), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char, Char, Char, Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.tryread), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tuple{Char, Char}, Tokenize.Tokens.Kind, Char})
precompile(Tuple{typeof(Tokenize.Lexers.lex_identifier), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Char})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Tokenize.Tokens.Kind}, Char})
precompile(Tuple{typeof(Tokenize.Lexers.next_token), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Tokens.untokenize), Tokenize.Tokens.Token})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.to_index), Array{Tokenize.Tokens.Kind, 1}, Nothing})
precompile(Tuple{typeof(OhMyREPL.Passes.BracketHighlighter.bracket_match), Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.get_color), OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Tokenize.Tokens.Kind, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#2#4")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Crayons, Symbol("#3#5")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Crayons.to_256_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Crayons._print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(Crayons.to_system_colors), Crayons.ANSIColor})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Crayons.Crayon})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base, Symbol("#readline##kw")), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#22#47")), String}, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(OhMyREPL.enable_pass!), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(OhMyREPL.Prompt._commit_line), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_left), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.peek), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#3#10")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#3#10")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_move_right), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(Base.to_index), Array{Char, 1}, Nothing})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s664, #s663} where #s663<:Integer where #s664<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s664, #s663} where #s663<:Integer where #s664<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#14#39")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#14#39")), Any, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#7#14")){REPL.LineEdit.MIState, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(REPL, Symbol("#51#60")){REPL.LineEdit.Prompt}, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.commit_line), Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_newline), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#110#163")), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(REPL.helpmode), String})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}})
precompile(Tuple{typeof(REPL._helpmode), Base.TTY, String})
precompile(Tuple{typeof(REPL.helpmode), Base.TTY, String})
precompile(Tuple{getfield(Core, Symbol("#@doc")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Markdown.Config, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("##parse#20")), Markdown.Config, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Docs.formatdoc), Base.Docs.DocStr})
precompile(Tuple{typeof(Base.Docs.parsedoc), Base.Docs.DocStr})
precompile(Tuple{typeof(REPL.lookup_doc), Symbol})
precompile(Tuple{typeof(Base.Docs.splitexpr), Expr})
precompile(Tuple{typeof(Base.Docs.bindingexpr), Any})
precompile(Tuple{typeof(REPL.accessible), Module})
precompile(Tuple{typeof(REPL.doc_completions), String})
precompile(Tuple{typeof(REPL.repl_search), Base.TTY, String})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Array{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Vararg{Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, N} where N})
precompile(Tuple{typeof(Base._typed_vcat), Type{Any}, Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.unique), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(Base.unique)})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Symbol})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Base.Set{Any}})
precompile(Tuple{typeof(REPL.filtervalid), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(REPL.filtervalid)})
precompile(Tuple{typeof(REPL.fuzzysort), String, Array{String, 1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Tuple{Float64, Int64}, 1}})
precompile(Tuple{typeof(Base.Docs.doc), Base.Docs.Binding})
precompile(Tuple{typeof(Base.Docs.aliasof), Base.Docs.Binding})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Base.Docs.Binding})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Base.Docs.Binding})
precompile(Tuple{typeof(Base._collect), Array{Base.Docs.DocStr, 1}, Base.Generator{Array{Base.Docs.DocStr, 1}, typeof(Base.Docs.parsedoc)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Base.Docs.DocStr, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Docs.Binding, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Type{T} where T, Symbol})
precompile(Tuple{typeof(Base.Docs.doc), Base.Docs.Binding, Type{T} where T})
precompile(Tuple{typeof(Base.Docs.getdoc), Any, Any})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("#21#22")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.pushitem!), Markdown.List, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Markdown, Symbol("#35#36")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#31#32")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#33#34")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{getfield(Markdown, Symbol("##_parse#90")), Bool, Bool, typeof(Markdown._parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Markdown.interpinner), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#29#30")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Markdown, Symbol("#55#57")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#23#25")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Symbol})
precompile(Tuple{typeof(Base.collect_to!), Array{Markdown.MD, 1}, Base.Generator{Array{Base.Docs.DocStr, 1}, typeof(Base.Docs.parsedoc)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.MD, 1}, Markdown.MD, Base.Generator{Array{Base.Docs.DocStr, 1}, typeof(Base.Docs.parsedoc)}, Int64})
precompile(Tuple{typeof(REPL.insert_hlines), Base.TTY, Markdown.MD})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Markdown.MD})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Crayons._parse_color), Symbol})
precompile(Tuple{getfield(Crayons, Symbol("##Crayon#1")), Symbol, Symbol, Symbol, Bool, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Type{Crayons.Crayon}})
precompile(Tuple{getfield(Crayons, Symbol("##Crayon#1")), Symbol, Symbol, Bool, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Crayons._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{REPL.Terminals.TTYTerminal}, Markdown.Code, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Markdown._term_header), Base.IOContext{REPL.Terminals.TTYTerminal}, Markdown.Header{1}, Char, Int64})
precompile(Tuple{typeof(Markdown.term), Base.IOContext{REPL.Terminals.TTYTerminal}, Markdown.Header{1}, Int64})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Char})
precompile(Tuple{getfield(Markdown, Symbol("#173#174")){Char, Int64, String}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.string_terminated), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.read_string), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_quote), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Bool})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Crayons.Crayon, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(OhMyREPL.Prompt, Symbol("#25#50")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.show_completions), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.LineEdit.common_prefix), Any})
precompile(Tuple{typeof(Base.:(!=)), String, PyCall.PyObject})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.PromptState, Any})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, Any})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), String})
precompile(Tuple{typeof(Base.incomplete_tag), Expr})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_methods), Expr, Module})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Module})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Module})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#21#25")), Module})
precompile(Tuple{typeof(Base.unique), Array{REPL.REPLCompletions.Completion, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.complete_symbol), String, getfield(REPL.REPLCompletions, Symbol("#22#26")), Module})
precompile(Tuple{typeof(Base.:(*)), PyCall.PyObject, String})
precompile(Tuple{typeof(Base.:(*)), String, PyCall.PyObject})
precompile(Tuple{typeof(REPL.REPLCompletions.completions), String, Int64, Module})
precompile(Tuple{typeof(Base.incomplete_tag), Int64})
precompile(Tuple{getfield(REPL.REPLCompletions, Symbol("#9#10")){getfield(REPL.REPLCompletions, Symbol("#21#25"))}, Symbol})
precompile(Tuple{typeof(Base.filter!), getfield(REPL.REPLCompletions, Symbol("#9#10")){getfield(REPL.REPLCompletions, Symbol("#21#25"))}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.unique!), typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base.unique!), Array{Any, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, String, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, String, Bool}, Int64, Int64})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#6#7")){Bool, REPL.LineEdit.PromptState, Float64}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#24#25")), Any, Any})
precompile(Tuple{typeof(Base.occursin), String, String})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{Type{REPL.REPLCompletions.MethodCompletion}, Function, Type{T} where T, Method})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.MethodCompletion})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#394#396")), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.kwarg_decl), Method, Nothing})
precompile(Tuple{typeof(Base.updated_methodloc), Method})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Method})
precompile(Tuple{getfield(REPL.REPLCompletions, Symbol("#1#2")){REPL.REPLCompletions.MethodCompletion}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.argtype_decl), Base.ImmutableDict{Symbol, Any}, Symbol, DataType, Int64, Int32, Bool})
precompile(Tuple{typeof(Base.string_with_env), Base.ImmutableDict{Symbol, Any}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{String, String}, 1}, Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{String, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.maximum), Array{Int64, 1}})
precompile(Tuple{typeof(REPL.Terminals.cmove_down), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(REPL.Terminals.cmove_right), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(Base.write), Base.TTY, Char})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Char}, Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{typeof(Main.x), Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{typeof(Main.x), Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.x), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.x), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.x), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Tokenize.Lexers.lex_star), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Timer}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Timer, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(PyCall.pygui_stop), Symbol})
precompile(Tuple{typeof(PyCall.pygui_stop_all)})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})

precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.TTY, Base.TTY})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, Nothing}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Module, Nothing}, Nothing, Module})
precompile(Tuple{typeof(IJulia.push_preexecute_hook), Function})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Revise.WatchList}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.PkgId}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.PkgId}, Base.PkgId, String})
precompile(Tuple{getfield(Revise, Symbol("#90#91")), Module, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#CompilerABI#3#4")), Nothing, Nothing, Symbol, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.MacOS}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.TTY})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Base.:(*)), String, String, String})
precompile(Tuple{typeof(Base.get), Base.EnvDict, String, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Int64, String})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(ZMQ._get_fd), ZMQ.Socket})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{Type{FileWatching._FDWatcher}, Base.Libc.RawFD, Bool, Bool})
precompile(Tuple{Type{ZMQ.Socket}, ZMQ.Context, Int64})
precompile(Tuple{Type{ZMQ.Socket}, Int64})
precompile(Tuple{typeof(Base.bind), ZMQ.Socket, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, ZMQ.Socket})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Base.ReentrantLock, ZMQ.Socket})
precompile(Tuple{typeof(IJulia.heartbeat_thread), Ptr{Nothing}})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Base.CoreLogging.global_logger), Base.CoreLogging.SimpleLogger})
precompile(Tuple{typeof(IJulia.msg_header), IJulia.Msg, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, ZMQ.Socket})
precompile(Tuple{typeof(Printf.decode_dec), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(IJulia.get_log_preface)})
precompile(Tuple{typeof(ZMQ.msg_init), Int64})
precompile(Tuple{typeof(ZMQ._MessageRef), String})
precompile(Tuple{typeof(ZMQ._get_events), ZMQ.Socket})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching._FDWatcher})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching._FDWatcher})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching._FDWatcher})
precompile(Tuple{getfield(FileWatching, Symbol("##wait#1")), Bool, Bool, typeof(Base.wait), FileWatching._FDWatcher})
precompile(Tuple{typeof(ZMQ._send), ZMQ.Socket, Base.RefValue{ZMQ._Message}, Bool})
precompile(Tuple{typeof(Base.close), Base.RefValue{ZMQ._Message}})
precompile(Tuple{getfield(ZMQ, Symbol("##send#13")), Bool, typeof(Sockets.send), ZMQ.Socket, String})
precompile(Tuple{typeof(Base.unsafe_write), MbedTLS.MD{true}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(IJulia.hmac), String, String, String, String})
precompile(Tuple{typeof(IJulia.send_ipython), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(IJulia.send_status), String, IJulia.Msg})
precompile(Tuple{typeof(IJulia.send_status), String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.init), Array{String, 1}})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.IOStream})
precompile(Tuple{typeof(JSON.Parser.current), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.byteat), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.StreamingParserState{Base.IOStream}, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.throw_boundserror), JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.set_ui), UInt64})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(JSON.Parser._float_from_bytes), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}, Bool, JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{Type{MbedTLS.MD{IsHMAC} where IsHMAC}, MbedTLS.MDKind, String})
precompile(Tuple{Type{IJulia.IJuliaStdio{IO_t} where IO_t<:IO}, Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.redirect_stdout), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stderr), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stdin), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.CoreLogging.SimpleLogger}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.UUID})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.UUID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Dates.DateTime, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x59000000)}, Dates.DateTime})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Char})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x6d000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x64000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime, Dates.DateFormat{Symbol("YYYY-mm-dd\THH:MM:SS"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x73000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime, Dates.DateFormat{Symbol("YYYY-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{typeof(Base.print), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, String}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{Type{IJulia.InlineDisplay}})
precompile(Tuple{typeof(Base.Multimedia.pushdisplay), IJulia.InlineDisplay})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{IO}})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}})
precompile(Tuple{typeof(IJulia.watch_stdio)})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(IJulia.waitloop)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(Base, Symbol("#wait_locked#515")), Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, String}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.unsafe_write), Base64.Base64EncodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.close), Base64.Base64EncodePipe})
precompile(Tuple{typeof(IJulia.send_stream), String})
precompile(Tuple{typeof(IJulia.watch_stream), Base.PipeEndpoint, String})
precompile(Tuple{getfield(IJulia, Symbol("#22#24"))})
precompile(Tuple{typeof(IJulia.send_stdio), String})
precompile(Tuple{getfield(Base, Symbol("#504#505")){typeof(IJulia.send_stdout), Base.Timer}})
precompile(Tuple{getfield(IJulia, Symbol("#23#25"))})
precompile(Tuple{getfield(Base, Symbol("#504#505")){typeof(IJulia.send_stderr), Base.Timer}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}}})
precompile(Tuple{typeof(ZMQ.msg_init)})
precompile(Tuple{typeof(ZMQ._recv!), ZMQ.Socket, Base.RefValue{ZMQ._Message}})
precompile(Tuple{typeof(ZMQ.unsafe_copy), Type{String}, Base.RefValue{ZMQ._Message}})
precompile(Tuple{typeof(Sockets.recv), ZMQ.Socket, Type{String}})
precompile(Tuple{typeof(IJulia.recv_ipython), ZMQ.Socket})
precompile(Tuple{typeof(IJulia.flush_all)})
precompile(Tuple{typeof(IJulia.eventloop), ZMQ.Socket})
precompile(Tuple{getfield(IJulia, Symbol("#14#17"))})
precompile(Tuple{getfield(IJulia, Symbol("#15#18"))})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(IJulia.kernel_info_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.print_to_string), UInt32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, String})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.flush), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyBuffer}})
precompile(Tuple{getfield(Core.Compiler, Symbol("#295#300")), Int8})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Base.UnitRange{Int64}, Base.RegexAndMatchData})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Int64, Base.RegexAndMatchData})
precompile(Tuple{getfield(Base, Symbol("##replace#336")), Int64, typeof(Base.replace), String, Base.Pair{Base.Regex, getfield(IJulia, Symbol("#37#38"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Int64}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.Multimedia.displayable), IJulia.InlineDisplay, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(IJulia.push_postexecute_hook), Function})
precompile(Tuple{typeof(IJulia.push_posterror_hook), Function})
precompile(Tuple{typeof(PyPlot.force_new_fig)})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.:(==)), Char}, Base.SubString{String}})
precompile(Tuple{typeof(SoftGlobalScope.softscope_include_string), Module, String, String})
precompile(Tuple{getfield(Base.Meta, Symbol("#parse##kw")), NamedTuple{(:greedy, :raise), Tuple{Bool, Bool}}, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.add_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Symbol, Int64, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope.softscope), Module, Expr})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), LineNumberNode, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Type{LineNumberNode}})
precompile(Tuple{typeof(Base.setindex!), Array{LineNumberNode, 1}, LineNumberNode, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), QuoteNode, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, QuoteNode, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Symbol, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Int64, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Any, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.isempty), PyPlot.Figure})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyPlot.display_figs)})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.tryparse_internal), Type{Base.GMP.BigInt}, String, Int64, Int64, Int64, Bool})
precompile(Tuple{getfield(Base, Symbol("##parse#346")), Nothing, typeof(Base.parse), Type{Base.GMP.BigInt}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.GMP.BigInt}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Integer}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(∉)), Int64, Base.Set{Int64}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), PyPlot.Figure}, Array{Any, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, Union{String, JSON.Writer.JSONText}}}})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, PyPlot.Figure})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String, String})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, PyPlot.Figure})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, JSON.Writer.JSONText, String})
precompile(Tuple{typeof(IJulia.display_dict), PyPlot.Figure})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.Multimedia.display), IJulia.InlineDisplay, PyPlot.Figure})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, PyPlot.Figure})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base64.Base64EncodePipe}, Any})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{Base64.Base64EncodePipe}, Any})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, PyPlot.Figure})
precompile(Tuple{typeof(Base.sizeof), PyPlot.Figure})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, PyPlot.Figure})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/png")}, PyPlot.Figure})
precompile(Tuple{Type{Core.Compiler.Signature}, PyCall.PyObject, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Function}, 1}, Tuple{Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}, Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}, Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}, Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}, Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}, Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}, Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}, Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}, Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}, Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}, Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}}})
precompile(Tuple{typeof(Base.union), Array{Any, 1}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{getfield(PyCall, Symbol("##def_py_class#46")), Array{Any, 1}, Array{Tuple{Symbol, Function, Nothing}, 1}, Array{Any, 1}, typeof(PyCall.def_py_class), String, Array{Tuple{Symbol, Function}, 1}})
precompile(Tuple{typeof(PyCall.pyio_initialize)})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Base.IOContext{Base64.Base64EncodePipe}})
precompile(Tuple{Type{PyCall.PyObject}, Base.IOContext{Base64.Base64EncodePipe}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOContext{Base64.Base64EncodePipe}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOContext{Base64.Base64EncodePipe}}, Int64, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:format, :bbox_inches), Tuple{String, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOContext{Base64.Base64EncodePipe}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:format, :bbox_inches), Tuple{String, String}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Symbol, Function, Nothing}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Function, Nothing}, 1}, Tuple{Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}, Tuple{Symbol, getfield(PyCall, Symbol("##closed_get#255#81")), Nothing}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Any, 1}, Tuple{Array{Any, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.hashindex), PyCall.PyObject, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, PyCall.PyObject})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{PyCall.PyObject, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{Symbol, PyCall.PyObject}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PyCall.PyObject}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PyCall.PyObject}, PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##close#254#80"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##fileno#257#83"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##flush#258#84"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##isatty#259#85"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readable#260#86"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##writable#261#87"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readline#262#88"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readlines#263#89"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##seek#264#90"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##seekable#265#91"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##tell#266#92"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##writelines#267#93"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##read#268#94"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readall#269#95"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readinto#270#96"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##write#271#97"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##encoding_get#256#82"))}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#48#50")), Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##closed_get#255#81"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#48#50")), Tuple{Symbol, getfield(PyCall, Symbol("##closed_get#255#81")), Nothing}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, PyCall.PyObject, Symbol})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Dict{Symbol, PyCall.PyObject}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, String, Vararg{Any, N} where N})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{PyCall.PyObject}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Tuple{PyCall.PyObject}, Base.Dict{Any, Any}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Tuple{PyCall.PyObject}, Base.Dict{Any, Any}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, true}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.iterate), PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, Symbol, Bool})
precompile(Tuple{getfield(PyCall, Symbol("##__init__#253#77#79")), Bool, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}, PyCall.PyObject, Base.IOContext{Base64.Base64EncodePipe}})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}, Tuple{PyCall.PyObject, Base.IOContext{Base64.Base64EncodePipe}}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(PyCall.pyreturn), Nothing})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, AbstractString}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, AbstractString}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, AbstractString}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##write#271#97"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##write#271#97"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##write#271#97")), PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##write#271#97")), Tuple{PyCall.PyObject, String}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base64.Base64EncodePipe}, String})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(PyCall.pyreturn), Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, PyPlot.Figure})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){PyPlot.Figure}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, PyPlot.Figure})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, PyPlot.Figure})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{Any, Any}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{Any, Any}}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{Any, Any}}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Base.Dict{Any, Any}}, Type{String}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{K, V} where V where K}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{K, V} where V where K}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.Dict{K, V} where V where K}, String})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Array{PyCall.PyObject, 1}}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(IJulia.metadata), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia.display_dict), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base64.Base64EncodePipe}, String, String})
precompile(Tuple{typeof(Base.array_summary), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.displaysize), Base.IOContext{Base64.Base64EncodePipe}})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.IOContext{Base64.Base64EncodePipe}, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, typeof(Base.sprint), Function, PyCall.PyObject})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Array{PyCall.PyObject, 1}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Array{PyCall.PyObject, 1}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Array{PyCall.PyObject, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(PyPlot, Symbol("##hist#144")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.hist), Array{Float64, 1}})
precompile(Tuple{typeof(PyPlot.hist), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia.metadata), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia.display_dict), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, Char})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{PyCall.PyObject, 1}, Char, Char})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base64.Base64EncodePipe}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Float64, Bool, Bool})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base64.Base64EncodePipe}, Array{Float64, 1}, Char, Char})
precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, Char, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, String, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, Char, String, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base64.Base64EncodePipe}, Array{PyCall.PyObject, 1}, Char, Char})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base64.Base64EncodePipe}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.typeinfo_eltype), Type{T} where T})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(IJulia.shutdown_request), ZMQ.Socket, IJulia.Msg})

