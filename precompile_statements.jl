precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.afoldl), Base.var"#42#43", Type, Type, Type, Type, Type, Type, Type})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Float64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Tuple{Int64, Int64}}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Int64}}})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Symbol}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Float64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Tuple{Int64, Int64}}, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, Nothing}, Base.Pair{Symbol, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.swap_watch_package), Base.PkgId})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(FileWatching.poll_file), String, Float64, Int64})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Base.CacheHeaderIncludes, 1}, Array{Base.PkgId, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Base.CacheHeaderIncludes, 1}, Array{Base.PkgId, 1}}, Int64, Int64})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.cd), Revise.var"#40#41"{Revise.PkgData}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.var"#@__DIR__", LineNumberNode, Module})
precompile(Tuple{typeof(Base.pushfirst!), Array{String, 1}, String})
precompile(Tuple{typeof(VSCodeServer.JuliaInterpreter.__init__)})
precompile(Tuple{typeof(VSCodeServer.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Revise.revise_file_queued), Revise.PkgData, String})
precompile(Tuple{typeof(VSCodeServer.pkgload), Base.PkgId})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{Base.var"#@static", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@v_str", LineNumberNode, Module, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#1#3", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Main.var"#1#3"}})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:is_dev, :crashreporting_pipename), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{VSCodeServer.var"#serve##kw", NamedTuple{(:is_dev, :crashreporting_pipename), Tuple{Bool, String}}, typeof(VSCodeServer.serve), String})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.run), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{Main.var"#2#4"{Array{String, 1}}, REPL.LineEditREPL})
precompile(Tuple{VSCodeServer.var"#1#3", REPL.LineEditREPL})
precompile(Tuple{OhMyREPL.var"#1#4", REPL.LineEditREPL})
precompile(Tuple{REPL.LineEdit.var"#add_nested_key!##kw", Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Union{Char, String}, Any})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, String}}, String})
precompile(Tuple{Type{Base.Pair{String, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Pair{String, OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}}}, Any, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{VSCodeServer.var"#60#61"})
precompile(Tuple{VSCodeServer.JSONRPC.var"#1#3"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.JSONRPC.var"#2#4"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.var"#91#94"{Bool, String}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_next_message), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{VSCodeServer.var"#2#4"{REPL.LineEditREPL}})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{VSCodeServer.JSON.Parser.var"##parse#1", Type, Type{Int64}, typeof(VSCodeServer.JSON.Parser.parse), String})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.parse_value), VSCodeServer.JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, VSCodeServer.JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.skip!), VSCodeServer.JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.dispatch_msg), Base.RefValue{Union{Nothing, VSCodeServer.JSONRPC.JSONRPCEndpoint{IOIn, IOOut} where IOOut<:IO where IOIn<:IO}}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.dispatch_msg), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, VSCodeServer.JSONRPC.Handler}, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.repl_getvariables_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(VSCodeServer.wsicon), Module})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Module})
precompile(Tuple{typeof(VSCodeServer.treerender), Module})
precompile(Tuple{typeof(Base.getproperty), VSCodeServer.ReplWorkspaceItem, Symbol})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Any})
precompile(Tuple{typeof(VSCodeServer.wsicon), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(VSCodeServer.treerender), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(VSCodeServer.can_display), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Function})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Function})
precompile(Tuple{typeof(VSCodeServer.treerender), Function})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{Any, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_element), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, VSCodeServer.ReplWorkspaceItem})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Tuple}, Array{Symbol, 1}})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplWorkspaceItem, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, VSCodeServer.JSONRPC.var"#5#6", Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Base.Dict{String, Any}, VSCodeServer.JSONRPC.var"#5#6"}})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:mod,), Tuple{String}}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.repl_isModuleLoaded_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Bool})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, Bool}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{VSCodeServer.var"#93#96"{VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool}})
precompile(Tuple{Type{VSCodeServer.ReplRunCodeRequestParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{String}, String})
precompile(Tuple{Type{Bool}, Bool})
precompile(Tuple{typeof(VSCodeServer.repl_runcode_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.ReplRunCodeRequestParams})
precompile(Tuple{typeof(VSCodeServer.run_with_backend), Function})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{typeof(Base.display_error), Int64}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{typeof(Base.show_backtrace), Int64}}, Int64})
precompile(Tuple{VSCodeServer.var"#62#66"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Nothing})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Union{Nothing, String}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.json), Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.min), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{VSCodeServer.var"#63#67"{Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Revise.PkgData, String}, 1}, Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Revise.PkgData, String}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.Lt{Base.Order.var"#1#3"{typeof(Revise.pkgfileless), typeof(Base.identity)}}, Array{Tuple{Revise.PkgData, String}, 1}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Tuple{Revise.PkgData, String}, Nothing}})
precompile(Tuple{Type{Base.Dict{Tuple{Revise.PkgData, String}, Nothing}}})
precompile(Tuple{typeof(Base.include_string), typeof(REPL.softscope), Module, String, String})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Grisu.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Array{Grisu.Bignums.Bignum, 1}, 1}, Array{Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.similar), Array{Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:dpi, :grid, :palette, :size, :frame, :linewidth, :foreground_color_legend, :legendfontsize, :fontfamily), T} where T<:Tuple}, Tuple{Int64, Bool, Symbol, Tuple{Int64, Int64}, Symbol, Float64, Nothing, Int64, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:dpi, :grid, :palette, :size, :frame, :linewidth, :foreground_color_legend, :legendfontsize, :fontfamily), Tuple{Int64, Bool, Symbol, Tuple{Int64, Int64}, Symbol, Float64, Nothing, Int64, String}}})
precompile(Tuple{Plots.var"#default##kw", NamedTuple{(:dpi, :grid, :palette, :size, :frame, :linewidth, :foreground_color_legend, :legendfontsize, :fontfamily), Tuple{Int64, Bool, Symbol, Tuple{Int64, Int64}, Symbol, Float64, Nothing, Int64, String}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Bool})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.default), Symbol, Int64})
precompile(Tuple{typeof(Plots.default), Symbol, Symbol})
precompile(Tuple{typeof(Plots.default), Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.default), Symbol, Nothing})
precompile(Tuple{typeof(Plots.default), Symbol, Bool})
precompile(Tuple{Base.var"##chop#372", Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Plots.default), Symbol, Float64})
precompile(Tuple{typeof(Plots.default), Symbol, String})
precompile(Tuple{Base.Colon, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}, Float64}}})
precompile(Tuple{Type{NamedTuple{(:label, :legend), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:label, :legend), Tuple{String, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend), Plots.GRBackend})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.append!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s53", N} where N where var"#s53"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Any})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#37#38", Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Plots.var"##GridLayout#156", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(RecipesPipeline.pop_kw!), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{StaticArrays.SArray{Tuple{10}, ColorTypes.RGB{Float64}, 1, 10}, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{Type{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{Base.var"#97#98"{Plots.var"#151#152"}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{10}}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{10}, ColorTypes.RGB{Float64}, 1, 10}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:label,), Tuple{String}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Plots.var"##plot!#147", Any, typeof(RecipesBase.plot!), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:label,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Plots.var"##plot!#148", Any, typeof(RecipesBase.plot!), Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{LaTeXStrings.var"#@L_str", LineNumberNode, Module, String})
precompile(Tuple{Type{NamedTuple{(:maxsize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:maxsize,), Tuple{Int64}}, Type{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.getindex), String, Int64})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Plots.xlabel!), AbstractString})
precompile(Tuple{Plots.var"##xlabel!#425", Any, typeof(Plots.xlabel!), AbstractString})
precompile(Tuple{Type{NamedTuple{(:xlabel,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:xlabel,), Tuple{LaTeXStrings.LaTeXString}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:xlabel,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:xlabel,), Tuple{LaTeXStrings.LaTeXString}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:xlabel,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:xlabel,), Tuple{LaTeXStrings.LaTeXString}}}})
precompile(Tuple{typeof(Plots.slice_arg), LaTeXStrings.LaTeXString, Int64})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:guide,), Tuple{LaTeXStrings.LaTeXString}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:guide,), Tuple{LaTeXStrings.LaTeXString}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.ylabel!), AbstractString})
precompile(Tuple{Plots.var"##ylabel!#426", Any, typeof(Plots.ylabel!), AbstractString})
precompile(Tuple{Type{NamedTuple{(:ylabel,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:ylabel,), Tuple{LaTeXStrings.LaTeXString}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:ylabel,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:ylabel,), Tuple{LaTeXStrings.LaTeXString}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:ylabel,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:ylabel,), Tuple{LaTeXStrings.LaTeXString}}}})
precompile(Tuple{typeof(Base.findlast), Function, Base.SubString{String}})
precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), String, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, String, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(!=)), String, String})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{RecipesPipeline.var"#9#10"{Symbol}, Float64})
precompile(Tuple{PlotUtils.var"#optimize_ticks##kw", NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, PlotUtils.var"#43#44"}, Int64})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{PlotUtils.var"#45#48", Base.BottomRF{typeof(Base.max)}}, Base._InitialValue, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, PlotUtils.var"#47#51"{Float64}}})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RecipesPipeline.var"#9#10"{Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#354#355"{typeof(Plots.convert_sci_unicode)}, Array{String, 1}})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Plots.var"#354#355"{typeof(Plots.convert_sci_unicode)}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{Plots.var"##font#130", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{Type{ErrorException}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation, :color), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{Plots.var"#gr_set_font##kw", NamedTuple{(:halign, :valign, :rotation, :color), Tuple{Symbol, Symbol, Int64, ColorTypes.RGBA{Float64}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.inqtext), Int64, Int64, String})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.:(!=)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Plots.guidefont), Plots.Axis})
precompile(Tuple{Plots.var"##gr_set_font#351", Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_text_size), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._maximum), Array{Measures.Length{:mm, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{Base.var"#maximum##kw", NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{Base.var"##mapfoldl#214", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), Base._InitialValue, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, Plots.var"#57#58"{Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.legendfont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), T} where T<:Tuple}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_update_viewport_legend!), Array{Float64, 1}, Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks, :segments, :tick_segments, :grid_segments, :minorgrid_segments, :border_segments), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{String, 1}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}, Plots.Segments{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_grid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_minorgrid), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_spine), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_nominal_size), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.min), Int64, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_border), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Plots.gr_draw_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Plots.Segments{Tuple{Float64, Float64}}, Function})
precompile(Tuple{typeof(Plots.gr_label_ticks), Plots.Subplot{Plots.GRBackend}, Symbol, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_axis_height), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Plots.gr_axis_width), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_gradient), Plots.Series})
precompile(Tuple{Plots.var"#357#358"{Plots.Series}, Symbol})
precompile(Tuple{typeof(Plots.handle_surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.handle_surface), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_clims), Plots.Subplot{Plots.GRBackend}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series, Function})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_segments), Plots.Series, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.isempty), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Plots.NaNSegmentsIterator, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), Base.var"#76#77"{Plots.var"#19#20"{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#19#20"{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Plots.var"#59#61"{Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base.minimum), Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#6#13"}, Plots.var"#7#14"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.min)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#6#13"}, Plots.var"#7#14"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#6#13", Base.MappingRF{Plots.var"#7#14", Base.BottomRF{typeof(Base.min)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{Plots.var"#6#13", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#6#13"}, Plots.var"#8#15"}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.max)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#6#13"}, Plots.var"#8#15"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#6#13", Base.MappingRF{Plots.var"#8#15", Base.BottomRF{typeof(Base.max)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#6#13"}})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesSegment, Symbol})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Series})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{Plots.var"#gr_polyline##kw", NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#6#13"}, Int64})
precompile(Tuple{typeof(Plots.gr_add_legend), Plots.Subplot{Plots.GRBackend}, NamedTuple{(:w, :h, :dy, :leftw, :textw, :rightw, :xoffset, :yoffset, :width_factor), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{typeof(VSCodeServer.safe_render), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{VSCodeServer.var"##sprintlimited#12", Function, Int64, String, Bool, typeof(VSCodeServer.sprintlimited), Base.Multimedia.MIME{Symbol("text/plain")}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.GRBackend})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(TableTraits.isiterabletable), Module})
precompile(Tuple{typeof(VSCodeServer.can_display), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(TableTraits.isiterabletable), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(VSCodeServer.treerender), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(VSCodeServer.can_display), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{typeof(TableTraits.isiterabletable), typeof(Base.MainInclude.eval)})
precompile(Tuple{typeof(TableTraits.isiterabletable), typeof(Base.MainInclude.include)})
precompile(Tuple{typeof(VSCodeServer.wsicon), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(VSCodeServer.treerender), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(VSCodeServer.can_display), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(TableTraits.isiterabletable), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Array{Float64, 1}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Array{Float64, 1}})
precompile(Tuple{typeof(VSCodeServer.treerender), Array{Float64, 1}})
precompile(Tuple{typeof(Base.print_to_string), Type, Vararg{Any, N} where N})
precompile(Tuple{typeof(VSCodeServer.can_display), Array{Float64, 1}})
precompile(Tuple{typeof(TableTraits.isiterabletable), Array{Float64, 1}})
precompile(Tuple{typeof(VSCodeServer.unwrap), VSCodeServer.Wrapper})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, VSCodeServer.ReplRunCodeRequestReturn}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Int64}, Base.Pair{String, VSCodeServer.ReplRunCodeRequestReturn}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplRunCodeRequestReturn, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Nothing})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#2#28", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#28", Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{OhMyREPL.BracketInserter.var"#7#14"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#22#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#48", Any, Any, Any})
precompile(Tuple{typeof(REPL.Terminals.cmove_up), REPL.Terminals.TerminalBuffer})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#25#51", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#25#51", Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.move_input_end), Union{REPL.LineEdit.MIState, REPL.LineEdit.ModeState}})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{REPL.var"#do_respond#61"{Bool, Bool, REPL.var"#72#82"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{VSCodeServer.var"#42#44"{REPL.LineEditREPL, REPL.LineEdit.Prompt}, Expr})
precompile(Tuple{typeof(VSCodeServer.evalrepl), Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#46#48"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#46#48"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#46#48"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64, Int64})
precompile(Tuple{VSCodeServer.var"#46#48"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Function})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{typeof(TableTraits.isiterabletable), typeof(Main.f)})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(VSCodeServer.display_repl_error), Base.TTY, UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Nothing})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.treerender), Nothing})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Nothing})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(VSCodeServer.can_display), Nothing})
precompile(Tuple{typeof(TableTraits.isiterabletable), Nothing})
precompile(Tuple{typeof(Main.f), Int64})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(VSCodeServer.wsicon), Int64})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Int64})
precompile(Tuple{typeof(VSCodeServer.treerender), Int64})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(VSCodeServer.can_display), Int64})
precompile(Tuple{typeof(TableTraits.isiterabletable), Int64})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.PollingFileWatcher})
