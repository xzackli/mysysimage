precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#45#76"}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#74#105"{REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPL.var"#65#74"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, REPL.LineEdit.var"#251#255"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, REPL.var"#55#58"{REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), Function})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#133#186", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#111#164", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{REPL.LineEdit.var"#110#163", String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.getproperty), REPL.REPLBackend, Symbol})
precompile(Tuple{typeof(Base.pushfirst!), Array{Any, 1}, Function})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.swap_watch_package), Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}})
precompile(Tuple{typeof(Base._deleteat!), Array{Tuple{Module, String, Float64}, 1}, Array{Int64, 1}, Base.Nowhere})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}, Array{Base.PkgId, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{Tuple{Module, String, Float64}, 1}, Array{Base.PkgId, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setproperty!), Revise.PkgData, Symbol, Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Base.PkgId, 1}}, Array{Base.PkgId, 1}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.cd), Revise.var"#38#39"{Revise.PkgData}, String})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#2#28", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#28", Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#22#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#48", Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{Type{Base.Dict{String, Base.PkgId}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.PkgId}, String})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(VersionParsing.vparse), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
precompile(Tuple{typeof(PyCall._getproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyerror), String})
precompile(Tuple{typeof(PyCall.pyerror), String, PyCall.PyObject, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.get!), PyCall.var"#118#119"{Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.Multimedia.displayable), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(PyPlot.find_backend), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(Base.insert!), Array{Tuple{Symbol, String}, 1}, Int64, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##printstyled#746", Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##with_output_color#745", Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type{T} where T})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyTypeObject}})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{OhMyREPL.Prompt.var"#2#28", Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#48", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, Any})
precompile(Tuple{REPL.var"#do_respond#54"{Bool, Bool, REPL.var"#64#73"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Any, Any, Any})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_line), Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#13", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#38", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.ismutable), Any})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.write), REPL.Terminals.TTYTerminal, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{var"#s828", var"#s827"} where var"#s827"<:Integer where var"#s828"<:Integer, AbstractString})
precompile(Tuple{typeof(Tokenize.Lexers.lex_colon), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Char}, Array{Char, 1}, Int64})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState, Any})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#12", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#16", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.:(-)), Int64, Bool})
precompile(Tuple{typeof(REPL.Terminals.cmove_up), REPL.Terminals.TerminalBuffer})
precompile(Tuple{REPL.LineEdit.var"#22#23"{OhMyREPL.Prompt.var"#25#51", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#25#51", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_tab), REPL.LineEdit.MIState, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.tab_should_complete), Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert_tab), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{typeof(Main.f), Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.scrub_repl_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{Base.var"#showerror##kw", NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, MethodError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{Base.var"#689#690"{MethodError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.typesof), Int64})
precompile(Tuple{typeof(Base.Experimental.show_error_hints), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, MethodError, Core.SimpleVector, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.invokelatest), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##invokelatest#1", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{ColorTypes.var"#36#37", Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, MethodError, Core.SimpleVector, Tuple{}})
precompile(Tuple{typeof(Base.in), Function, Tuple{typeof(Base.zero), typeof(Base.one)}})
precompile(Tuple{typeof(Base.in), Function, Tuple{typeof(Base.zeros), typeof(Base.ones)}})
precompile(Tuple{typeof(Base.in), Function, Array{Function, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{typeof(Main.f), Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Base.var"#699#705", Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{Base.var"#show_trace_entry##kw", NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{typeof(Main.f), Float64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Float64, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Timer}})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{REPL.var"#63#72"{Base.IOStream}, Any})
