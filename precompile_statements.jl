precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(FileWatching.poll_file), String, Float64, Int64})
precompile(Tuple{typeof(Revise.watch_package_callback), Base.PkgId})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Pair{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.cd), Revise.var"#40#41"{Revise.PkgData}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{Base.Multimedia.var"#@MIME_str", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@r_str", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(Base.stat), RelocatableFolders.Path})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Base.var"#364#365"{String}, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, RelocatableFolders.Path})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, RelocatableFolders.Path})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Tuple{}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{Symbol, Symbol}}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{NamedTuple{(:fontfamily, :dpi, :linewidth, :label, :titlefontsize, :guidefontsize, :tickfontsize, :legendfontsize, :left_margin, :right_margin, :top_margin, :bottom_margin), T} where T<:Tuple}, Tuple{String, Int64, Float64, String, Int64, Int64, Int64, Int64, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{Plots.var"#default##kw", NamedTuple{(:fontfamily, :dpi, :linewidth, :label, :titlefontsize, :guidefontsize, :tickfontsize, :legendfontsize, :left_margin, :right_margin, :top_margin, :bottom_margin), Tuple{String, Int64, Float64, String, Int64, Int64, Int64, Int64, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, typeof(Plots.default)})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.default), Symbol, Int64})
precompile(Tuple{typeof(Plots.default), Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.default), Symbol, String})
precompile(Tuple{typeof(Plots.default), Symbol, Float64})
precompile(Tuple{typeof(OhMyREPL.BracketInserter.enable_autocomplete_brackets), Bool})
precompile(Tuple{Base.var"#@__DIR__", LineNumberNode, Module})
precompile(Tuple{typeof(VSCodeServer.JuliaInterpreter.__init__)})
precompile(Tuple{typeof(VSCodeServer.__init__)})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{Base.var"#@static", LineNumberNode, Module, Any})
precompile(Tuple{Base.var"#@v_str", LineNumberNode, Module, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#1#3", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Main.var"#1#3"}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:is_dev, :crashreporting_pipename), T} where T<:Tuple}, Tuple{Bool, String}})
precompile(Tuple{typeof(Sockets.uv_connectcb), Ptr{Nothing}, Int32})
precompile(Tuple{VSCodeServer.var"#serve##kw", NamedTuple{(:is_dev, :crashreporting_pipename), Tuple{Bool, String}}, typeof(VSCodeServer.serve), String})
precompile(Tuple{typeof(Revise.revise_file_queued), Revise.PkgData, String})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.run), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{Type{REPL.LineEditREPL}, REPL.Terminals.TextTerminal, Bool, Bool})
precompile(Tuple{Type{REPL.LineEditREPL}, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Main.var"#2#4"{Array{String, 1}}, REPL.LineEditREPL})
precompile(Tuple{VSCodeServer.var"#1#3", REPL.LineEditREPL})
precompile(Tuple{Plots.var"#270#306", REPL.LineEditREPL})
precompile(Tuple{OhMyREPL.var"#1#4", REPL.LineEditREPL})
precompile(Tuple{REPL.var"##setup_interface#73", Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{REPL.LineEdit.var"#add_nested_key!##kw", Any, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{K, V} where V where K, Union{Char, String}, Any})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, String}}, String})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{typeof(Core.convert), Type{OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}}, OhMyREPL.var"#3#6"{REPL.LineEdit.PrefixHistoryPrompt}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Pair{String, OhMyREPL.var"#2#5"{REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{Pkg.var"#3#4", REPL.LineEditREPL})
precompile(Tuple{typeof(REPL.run_repl), REPL.AbstractREPL, Any})
precompile(Tuple{VSCodeServer.var"#55#56"})
precompile(Tuple{VSCodeServer.JSONRPC.var"#1#3"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.JSONRPC.var"#2#4"{VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{VSCodeServer.var"#154#158"{Bool, String, Base.PipeEndpoint}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.get_next_message), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{VSCodeServer.var"#2#4"{REPL.LineEditREPL}})
precompile(Tuple{REPL.var"#49#54"{REPL.LineEditREPL, REPL.REPLBackendRef}})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{Type{REPL.LineEdit.PrefixSearchState}, Any, Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TextTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{VSCodeServer.JSON.Parser.var"##parse#1", Type, Type{Int64}, typeof(VSCodeServer.JSON.Parser.parse), String})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.parse_value), VSCodeServer.JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, VSCodeServer.JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(VSCodeServer.JSON.Parser.skip!), VSCodeServer.JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.dispatch_msg), Base.RefValue{Union{Nothing, VSCodeServer.JSONRPC.JSONRPCEndpoint{IOIn, IOOut} where IOOut<:IO where IOIn<:IO}}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.dispatch_msg), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, VSCodeServer.JSONRPC.Handler}, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.repl_getvariables_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(VSCodeServer.getvariables)})
precompile(Tuple{typeof(VSCodeServer.wsicon), Module})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Module})
precompile(Tuple{typeof(VSCodeServer.treerender), Module})
precompile(Tuple{typeof(Base.getproperty), VSCodeServer.ReplWorkspaceItem, Symbol})
precompile(Tuple{typeof(VSCodeServer.can_display), Module})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Any})
precompile(Tuple{typeof(VSCodeServer.wsicon), Function})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Function})
precompile(Tuple{typeof(VSCodeServer.treerender), Function})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(VSCodeServer.can_display), Function})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{VSCodeServer.ReplWorkspaceItem, 1}}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Array{VSCodeServer.ReplWorkspaceItem, 1}})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplWorkspaceItem, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, VSCodeServer.JSONRPC.var"#5#6", Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Generator{Base.Dict{String, Any}, VSCodeServer.JSONRPC.var"#5#6"}})
precompile(Tuple{Type{NamedTuple{(:mod,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(Base.convert), Type{NamedTuple{(:mod,), Tuple{String}}}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.repl_isModuleLoaded_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, NamedTuple{(:mod,), Tuple{String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Bool})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Bool}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{VSCodeServer.var"#157#161"{VSCodeServer.JSONRPC.MsgDispatcher, Base.Dict{String, Any}, Bool}})
precompile(Tuple{Type{VSCodeServer.ReplRunCodeRequestParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{String}, String})
precompile(Tuple{Type{Bool}, Bool})
precompile(Tuple{typeof(VSCodeServer.repl_runcode_request), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, VSCodeServer.ReplRunCodeRequestParams})
precompile(Tuple{typeof(VSCodeServer.run_with_backend), Function})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}, Tuple{}}, Int64, Int64})
precompile(Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Nothing})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.min), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{VSCodeServer.var"#58#62"{Bool, Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{Type{Base.Dict{Tuple{Revise.PkgData, String}, Nothing}}})
precompile(Tuple{typeof(Base.include_string), typeof(REPL.softscope), Module, String, String})
precompile(Tuple{Base.var"#@raw_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.gc_num)})
precompile(Tuple{typeof(Base.cumulative_compile_time_ns_before)})
precompile(Tuple{Base.Colon, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}}}, Float64}}})
precompile(Tuple{Type{NamedTuple{(:label, :legend), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:label, :legend), Tuple{String, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend), Plots.PyPlotBackend})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}, Any, Any})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pyerror), String})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyError, Symbol})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.current_python)})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{typeof(PyCall.pyerror), String, PyCall.PyError})
precompile(Tuple{typeof(Base.get!), PyCall.var"#115#116"{Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(VSCodeServer.on_pkg_load), Base.PkgId})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, _A}} where _A, Int64}}})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.Multimedia.displayable), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Plots.PlotsDisplay, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Plots.var"#290#326"})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{Plots.var"#291#327"})
precompile(Tuple{Plots.var"#292#328"})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{typeof(Base.length), Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.AbstractDisplay, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.append!), Array{Base.Multimedia.AbstractDisplay, 1}, Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, String})
precompile(Tuple{Type{NamedTuple{(:invalid,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:invalid,), Tuple{String}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.copy), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{PyCall.PyObject_struct}}}, Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{Type{PyCall.PyDict{K, V, isdict} where isdict where V where K}, PyCall.PyObject})
precompile(Tuple{Base.CoreLogging.var"#@warn", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{Base.var"#@eval", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.root_module), Base.PkgId})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(Revise.eval_require_now), Revise.PkgData, Int64, String, String, Module, Expr})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{Revise.var"#82#84"{Symbol, Revise.RelocatableExpr, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module}})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{Revise.var"##methods_by_execution!#20", Symbol, Bool, Bool, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{typeof(Revise.minimal_evaluation!), Any, Revise.CodeTrackingMethodInfo, Core.CodeInfo, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, LoweredCodeUtils.var"#15#18"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, LoweredCodeUtils.var"#16#19"}})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Links}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Links}, LoweredCodeUtils.Links, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, LoweredCodeUtils.var"#23#25"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, LoweredCodeUtils.var"#24#26"}})
precompile(Tuple{Type{Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Variable}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Variable}, LoweredCodeUtils.Variable, Symbol})
precompile(Tuple{Revise.var"#17#18"{Symbol}, Any})
precompile(Tuple{LoweredCodeUtils.var"#lines_required!##kw", NamedTuple{(:norequire,), Tuple{Tuple{}}}, typeof(LoweredCodeUtils.lines_required!), Array{Bool, 1}, Core.CodeInfo, LoweredCodeUtils.CodeEdges})
precompile(Tuple{Revise.var"##methods_by_execution!#24", Symbol, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Array{Bool, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Method, JuliaInterpreter.FrameCode}, Method})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Method, JuliaInterpreter.FrameCode}, JuliaInterpreter.FrameCode, Method})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, DataType}, Int64, Int64})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.FrameInstance, Type})
precompile(Tuple{typeof(JuliaInterpreter.prepare_frame), JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, Bool})
precompile(Tuple{typeof(Base.ntupleany), JuliaInterpreter.var"#44#45"{Array{Any, 1}, Int64}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.getargs), Array{Any, 1}, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Base.ntupleany), JuliaInterpreter.var"#67#68"{JuliaInterpreter.Frame}, Int64})
precompile(Tuple{typeof(JuliaInterpreter.append_any), Any})
precompile(Tuple{typeof(Base._append!), Array{Any, 1}, Base.HasLength, Core.SimpleVector})
precompile(Tuple{typeof(JuliaInterpreter.build_compiled_call!), Expr, Symbol, Core.CodeInfo, Int64, Int64, Array{Symbol, 1}, Module})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}, Nothing})
precompile(Tuple{typeof(Base.argtail), QuoteNode, Type, Vararg{Any}})
precompile(Tuple{typeof(Base.hash), Any, UInt64})
precompile(Tuple{typeof(JuliaInterpreter.parametric_type_to_expr), Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Function, Tuple{QuoteNode, DataType, Core.SimpleVector, Module, Int64}})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.parentmodule), Function})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#274", String})
precompile(Tuple{typeof(JuliaInterpreter.append_any), Any, Vararg{Any}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, JuliaInterpreter.var"#70#71"{Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#275", Int64})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#277", Type})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#276", Ptr{UInt8}, Ptr{UInt8}, Int64, Base.Val{UInt8}})
precompile(Tuple{typeof(Revise.add_includes!), Revise.CodeTrackingMethodInfo, Module, String})
precompile(Tuple{Distributed.var"#61#63", Distributed.LocalProcess})
precompile(Tuple{Distributed.var"#60#62", Distributed.LocalProcess})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Pair{Module, String}, 1}, Array{Pair{Module, String}, 1}})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Base.hash), Char, UInt64})
precompile(Tuple{Revise.var"#instantiate_sigs!##kw", NamedTuple{(:mode,), Tuple{Symbol}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{LoweredCodeUtils.var"#methoddef!##kw", NamedTuple{(:define,), Tuple{Bool}}, typeof(LoweredCodeUtils.methoddef!), Any, Array{Any, 1}, JuliaInterpreter.Frame, Any, Int64})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Expr})
precompile(Tuple{typeof(Base._any), Revise.var"#88#89"{LineNumberNode, Expr}, Array{Tuple{LineNumberNode, Expr}, 1}, Base.Colon})
precompile(Tuple{JuliaInterpreter.var"#jumplookup#69", Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Links}, GlobalRef})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Links}, LoweredCodeUtils.Links, GlobalRef})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Union{GlobalRef, Symbol}, Array{Int64, 1}}, GlobalRef})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Union{GlobalRef, Symbol}, LoweredCodeUtils.Variable}, LoweredCodeUtils.Variable, GlobalRef})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{LoweredCodeUtils.var"#terminal_preds!#29", Base.BitSet, Int64, LoweredCodeUtils.CodeEdges, Base.BitSet})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#278", TypeVar, Type})
precompile(Tuple{Revise.var"#methods_by_execution!##kw", NamedTuple{(:mode, :skip_include, :disablebp), Tuple{Symbol, Bool, Bool}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{Revise.var"##methods_by_execution!#20", Symbol, Bool, Bool, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:skip_include,), Tuple{Bool}}}, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, Module, Expr})
precompile(Tuple{JuliaInterpreter.CompiledCalls.var"###compiledcall#279", Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Revise.assign_this!), JuliaInterpreter.Frame, Tuple{Nothing, Expr}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(PyPlot.ioff)})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.PyPlotBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.append!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s30", N} where N where var"#s30"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Any})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#21#22", Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Symbol})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PyPlotBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.haskey), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PyPlotBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#555#556"{Plots.Plot{Plots.PyPlotBackend}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64}, Plots.var"#555#556"{Plots.Plot{Plots.PyPlotBackend}}}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Tuple{Int64, Int64}, Plots.var"#555#556"{Plots.Plot{Plots.PyPlotBackend}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Plots.px2inch), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(PyPlot.figure)})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.Figure}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyreturn), PyPlot.Figure})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64}})
precompile(Tuple{Plots.var"##GridLayout#164", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.PyPlotBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Nothing, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Font, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.PyPlotBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, Symbol}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_legend), Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{typeof(Base.afoldl), Base.var"#43#44", Type, Type, Type, Type, Type})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.findall), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Plots.var"#155#156", Tuple{Array{Base.Dict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Plots.var"#155#156", Tuple{Array{Base.Dict{Symbol, Any}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.PyPlotBackend, Symbol})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:(StaticArrays.StaticArray{S, T, 2} where T) where S<:Tuple, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArrays.StaticArray{S, T, 2} where S<:Tuple where T), Int64}}})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.PyPlotBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Plots.is_style_supported), Plots.PyPlotBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.PyPlotBackend, Symbol})
precompile(Tuple{typeof(Plots.update_clims), Plots.Subplot{Plots.PyPlotBackend}, Function})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.PyPlotBackend}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{NamedTuple{(:label, :xlabel), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.supertype), DataType})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.supertype), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{var"#s52"} where var"#s52"<:(ColorTypes.Colorant{T, N} where N where T), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{C}, Type} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Any})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{S} where S<:Base.Broadcast.BroadcastStyle, Int64}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:label, :xlabel), Tuple{String, String}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{Plots.var"##plot!#148", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(RecipesBase.plot!), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, String, Tuple{Symbol, Symbol}, NamedTuple{(:label, :xlabel), Tuple{String, String}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:label, :xlabel), Tuple{String, String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Any})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:guide,), Tuple{String}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots._update_subplot_legend), Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{Type{NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}}}, typeof(Plots.font)})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.PyPlotBackend}, Bool})
precompile(Tuple{typeof(Plots.ylabel!), AbstractString})
precompile(Tuple{Plots.var"##ylabel!#464", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Plots.ylabel!), AbstractString})
precompile(Tuple{Type{NamedTuple{(:ylabel,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:ylabel,), Tuple{String}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:ylabel,), Tuple{String}}, typeof(RecipesBase.plot!)})
precompile(Tuple{Plots.var"##plot!#148", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(RecipesBase.plot!)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:ylabel,), Tuple{String}}}})
precompile(Tuple{RecipesBase.var"#plot!##kw", NamedTuple{(:ylabel,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:ylabel,), Tuple{String}}}})
precompile(Tuple{typeof(Base.findall), Array{Union{Base.Missing, Bool}, 1}})
precompile(Tuple{typeof(Base.cumulative_compile_time_ns_after)})
precompile(Tuple{Type{Base.GC_Diff}, Base.GC_Num, Base.GC_Num})
precompile(Tuple{typeof(Base.getproperty), Base.GC_Diff, Symbol})
precompile(Tuple{typeof(Base.gc_alloc_count), Base.GC_Diff})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64, UInt64, Bool})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.Ryu.writefixed), Float64, Int64})
precompile(Tuple{typeof(Base.findlast), Function, Base.SubString{String}})
precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("juliavscode/html")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, String, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{Base64.var"##base64encode#5", Nothing, typeof(Base64.base64encode), Function, Base.Multimedia.MIME{Symbol("image/png")}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base64.Base64EncodePipe, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), PyPlot.Figure, String})
precompile(Tuple{PyCall.PyObject})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:forward,), Tuple{Bool}}, PyCall.PyObject, Float64, Float64})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:forward,), Tuple{Bool}}}, PyCall.PyObject, Float64, Vararg{Float64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:forward,), Tuple{Bool}}}})
precompile(Tuple{Type{PyCall.PyObject}, Bool})
precompile(Tuple{typeof(Base.getproperty), PyPlot.Figure, Symbol})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{PyCall.PyObject, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{PyCall.PyObject, Int64})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{PyCall.PyObject, Int64, Vararg{Int64}})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Int64, Vararg{Int64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Symbol}})
precompile(Tuple{Type{NamedTuple{(:label, :projection), T} where T<:Tuple}, Tuple{String, Nothing}})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :projection), Tuple{String, Nothing}}, PyCall.PyObject, Array{Int64, 1}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), VSCodeServer.VSCodeLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{typeof(Base.:(<=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Tuple{Ptr{Nothing}, Symbol}, String, Int64})
precompile(Tuple{Logging.var"##handle_message#3", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{Ptr{Nothing}, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame})
precompile(Tuple{Base.var"#show_tuple_as_call##kw", NamedTuple{(:demangle, :argnames), Tuple{Bool, Array{Symbol, 1}}}, typeof(Base.show_tuple_as_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Type})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:caller, :maxlog), Tuple{Base.StackTraces.StackFrame, Int64}}}, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{Base.var"##printstyled#868", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getproperty), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.py_handle_surface), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Plots.py_handle_surface), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.hascolorbar), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, Plots.var"#72#73"{Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PyPlotBackend}, Plots.Series})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, Float64}, Vararg{Pair{Symbol, Float64}}})
precompile(Tuple{typeof(Base.maximum), Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.isempty), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Plots.NaNSegmentsIterator, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Plots.var"#36#38"{Plots.Series}, Symbol})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Plots.var"#7#11", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.min)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Plots.var"#12#15"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#12#15", Base.BottomRF{typeof(Base.min)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._xfadjoint), Base.BottomRF{typeof(Base.max)}, Base.Generator{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Plots.var"#13#16"}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#13#16", Base.BottomRF{typeof(Base.max)}}}, Base._InitialValue, Array{Any, 1}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesSegment, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#558#568"{Base.UnitRange{Int64}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.single_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :dash_capstyle, :drawstyle), T} where T<:Tuple}, Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :dash_capstyle, :drawstyle), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String}}, PyCall.PyObject, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, String}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :dash_capstyle, :drawstyle), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :dash_capstyle, :drawstyle), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Float64, Float64, Float64, Float64}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Float64, String})
precompile(Tuple{Type{PyCall.PyObject}, Float64})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.py2array), Type, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{PyCall.PyObject}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PyCall.PyObject, 1}, PyCall.PyObject, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.Generator{Array{Any, 1}, Plots.var"#7#11"}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{PyCall.PyObject, Bool})
precompile(Tuple{typeof(Base.hasproperty), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Plots.py_set_scale), PyCall.PyObject, Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.supported_scales), Plots.PyPlotBackend})
precompile(Tuple{PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_set_lims), PyCall.PyObject, Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PyPlotBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{RecipesPipeline.var"#9#10"{Symbol}, Float64})
precompile(Tuple{PyCall.PyObject, Float64, Vararg{Float64}})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Float64, Vararg{Float64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.tuptype), DataType, Bool, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, PyCall.PyObject})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots.get_ticks), Symbol, Array{Float64, 1}, Array{Any, 1}, Tuple{Float64, Float64}, Vararg{Any}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Nothing, Tuple{Float64, Float64}, Symbol, Symbol})
precompile(Tuple{PlotUtils.var"#optimize_ticks##kw", NamedTuple{(:k_min, :k_max, :scale), Tuple{Int64, Int64, Symbol}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Float64, Float64}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, PlotUtils.var"#43#44"{DataType}}, Int64})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing, Symbol})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(Base.isinteger), Float64})
precompile(Tuple{typeof(Base.:(^)), Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{PlotUtils.var"#46#51"{Int64, PlotUtils.var"#sigdigits#50"{Int64, Int64}}, Float64})
precompile(Tuple{PlotUtils.var"#sigdigits#50"{Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:sigdigits, :base), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#round##kw", NamedTuple{(:sigdigits, :base), Tuple{Int64, Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int64})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Float64, Float64})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(Base.isinf), Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, RecipesPipeline.var"#9#10"{Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, RecipesPipeline.var"#9#10"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.PyPlotBackend})
precompile(Tuple{Type{Base.ComposedFunction{O, I} where I where O}, Function, Function})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.ComposedFunction{typeof(LaTeXStrings.latexstring), typeof(Plots.convert_sci_unicode)}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Base.ComposedFunction{typeof(LaTeXStrings.latexstring), typeof(Plots.convert_sci_unicode)}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Pair{String, String}})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}, Array{LaTeXStrings.LaTeXString, 1}}, Symbol})
precompile(Tuple{typeof(Plots.py_get_matching_math_font), String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, String}, Pair{String, Int64}, Pair{String, Float64}}})
precompile(Tuple{Type{PyCall.PyDict{K, V, isdict} where isdict where V where K}, Base.Dict{String, Any}})
precompile(Tuple{Type{PyCall.PyDict{String, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Tuple{Vararg{Int64, N1}} where N1, Int64}}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#9#10"{PyCall.PyBuffer}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#9#10"{PyCall.PyBuffer}}, Int64})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 1}}, Bool, Tuple{Int64}, Tuple{Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{Type{PyCall.PyArray{Float64, 1}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 1}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 1}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{Type{NamedTuple{(:fontdict,), T} where T<:Tuple}, Tuple{PyCall.PyDict{String, PyCall.PyAny, true}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:fontdict,), Tuple{PyCall.PyDict{String, PyCall.PyAny, true}}}, PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{Type{PyCall.PyObject}, PyCall.PyDict{String, PyCall.PyAny, true}})
precompile(Tuple{typeof(Plots.py_set_ticks), Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{LaTeXStrings.LaTeXString, 1}}, Symbol})
precompile(Tuple{PyCall.PyObject, Array{LaTeXStrings.LaTeXString, 1}})
precompile(Tuple{Type{NamedTuple{(:direction, :width, :length), T} where T<:Tuple}, Tuple{String, Float64, Float64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:direction, :width, :length), Tuple{String, Float64, Float64}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:direction, :width, :length), Tuple{String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:direction, :width, :length), Tuple{String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{LaTeXStrings.LaTeXString, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{NamedTuple{(:color, :linestyle, :linewidth, :alpha), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}, PyCall.PyObject, Bool})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, Tuple{Float64, Float64, Float64, Float64}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>)), Bool, Int64})
precompile(Tuple{typeof(Plots.py_set_axis_colors), Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject, Plots.Axis})
precompile(Tuple{typeof(Plots.py_set_spine_color), PyCall.PyObject, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{NamedTuple{(:axis, :which, :colors, :labelcolor), T} where T<:Tuple}, Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Plots.get_aspect_ratio), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.py_add_legend), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(*)), Bool, Int64})
precompile(Tuple{typeof(Plots.py_marker), Symbol})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Int64, Int64})
precompile(Tuple{typeof(Base.first), Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth, :linestyle, :solid_capstyle, :solid_joinstyle, :dash_capstyle, :dash_joinstyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:color, :linewidth, :linestyle, :solid_capstyle, :solid_joinstyle, :dash_capstyle, :dash_joinstyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}, PyCall.PyObject, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :solid_capstyle, :solid_joinstyle, :dash_capstyle, :dash_joinstyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :solid_capstyle, :solid_joinstyle, :dash_capstyle, :dash_joinstyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Plots.legend_angle), Symbol})
precompile(Tuple{typeof(Plots.py_legend_pos), Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Plots.py_legend_bbox), Tuple{Int64, Symbol}})
precompile(Tuple{typeof(ColorTypes.alpha), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox, :borderpad), T} where T<:Tuple}, Tuple{String, Tuple{Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool, Float64}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#43#44", Type, Type, Type, Type, Type, Type})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox, :borderpad), Tuple{String, Tuple{Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool, Float64}}, PyCall.PyObject, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox, :borderpad), Tuple{String, Tuple{Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Tuple{Float64, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox, :borderpad), Tuple{String, Tuple{Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Float64, Float64}, String})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Float64, Float64}})
precompile(Tuple{Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}})
precompile(Tuple{Type{NamedTuple{(:color, :family, :fontsize), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Nothing}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Plots.py_drawfig), PyPlot.Figure})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Plots.py_bbox), PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_extents), PyPlot.Figure})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 2}}, Bool, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{Type{PyCall.PyArray{Float64, 2}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 2}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.py_bbox_axis), PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_bbox), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.:(+)), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.py_bbox_title), PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_bbox_legend), PyCall.PyObject})
precompile(Tuple{typeof(Plots.ispositive), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.right), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bottom), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float64, Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Measures.Length{:mm, Float64}, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._maximum), Array{Measures.Length{:mm, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{Base.var"#maximum##kw", NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Base.MappingRF{_A, Base.BottomRF{typeof(Base.min)}} where _A, Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{Base.var"##mapfoldl#244", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), Base._InitialValue, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base._realtype), Function, Type})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.convert), Type{Measures.Length{:mm, Float64}}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.PyPlotBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.PyPlotBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox_to_pcts), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.left), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Measures.width), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.height), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64, Float64, Float64}}, PyCall.PyObject})
precompile(Tuple{Type{NamedTuple{(:format, :facecolor, :edgecolor, :dpi), T} where T<:Tuple}, Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}, PyCall.PyObject, Base64.Base64EncodePipe})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(PyCall.pyio_initialize)})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##__init__#274#77"{PyCall.var"##__init__#274#76#78"}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##close#275#79"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##fileno#278#82"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##flush#279#83"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##isatty#280#84"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##readable#281#85"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##writable#282#86"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##readline#283#87"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##readlines#284#88"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##seek#285#89"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##seekable#286#90"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##tell#287#91"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##writelines#288#92"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##read#289#93"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##readall#290#94"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##readinto#291#95"}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, PyCall.var"##write#292#96"}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Symbol, PyCall.var"##encoding_get#277#81", Nothing}, Vararg{Any}})
precompile(Tuple{Type{Array{Tuple{Symbol, Function, Nothing}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Function, Nothing}, 1}, Tuple{Tuple{Symbol, PyCall.var"##encoding_get#277#81", Nothing}, Tuple{Symbol, PyCall.var"##closed_get#276#80", Nothing}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Any, 1}, Tuple{Array{Any, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.filter!), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{PyCall.PyObject, 1}, Array{Any, 1}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##__init__#274#77"{PyCall.var"##__init__#274#76#78"}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, PyCall.PyObject})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PyCall.PyObject}, PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, PyCall.var"#47#49"}, Int64})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##close#275#79"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##fileno#278#82"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##flush#279#83"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##isatty#280#84"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##readable#281#85"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##writable#282#86"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##readline#283#87"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##readlines#284#88"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##seek#285#89"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##seekable#286#90"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##tell#287#91"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##writelines#288#92"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##read#289#93"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##readall#290#94"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##readinto#291#95"}})
precompile(Tuple{PyCall.var"#47#49", Tuple{Symbol, PyCall.var"##write#292#96"}})
precompile(Tuple{PyCall.var"#48#50", Tuple{Symbol, PyCall.var"##encoding_get#277#81", Nothing}})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject}})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, PyCall.var"#48#50"}, Int64})
precompile(Tuple{PyCall.var"#48#50", Tuple{Symbol, PyCall.var"##closed_get#276#80", Nothing}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{PyCall.var"##_#114", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, String, Vararg{Any}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Tuple{PyCall.PyObject}, Base.Dict{Any, Any}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.istuplen), Type, Bool, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, true}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PyCall.var"#57#58"{PyCall.var"##__init__#274#77"{PyCall.var"##__init__#274#76#78"}}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{PyCall.var"##__init__#274#77"{PyCall.var"##__init__#274#76#78"}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{PyCall.var"##__init__#274#77"{PyCall.var"##__init__#274#76#78"}, PyCall.PyObject, Base64.Base64EncodePipe})
precompile(Tuple{typeof(PyCall.pyreturn), Nothing})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, AbstractString}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PyCall.var"#57#58"{PyCall.var"##write#292#96"}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{PyCall.var"##write#292#96"}}})
precompile(Tuple{PyCall.var"##write#292#96", PyCall.PyObject, String})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, String})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(PyCall.pyreturn), Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PyCall.var"#57#58"{PyCall.var"##flush#279#83"}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{PyCall.var"##flush#279#83"}}})
precompile(Tuple{PyCall.var"##flush#279#83", PyCall.PyObject})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Pair{String, String}, Vararg{Pair{String, String}}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_notification), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.flush), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(VSCodeServer.safe_render), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{VSCodeServer.var"##sprintlimited#17", Function, Int64, String, Bool, typeof(VSCodeServer.sprintlimited), Base.Multimedia.MIME{Symbol("text/plain")}, Vararg{Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{VSCodeServer.LimitIO{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Plots.PyPlotBackend})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base._show_type), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Dict{Any, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Series, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.Dict{Symbol, Any}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getindex), Tuple{Base.Broadcast.Extruded{Array{Plots.Series, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.all), Function, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), Array{Base.Dict{Any, Any}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.all), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(VSCodeServer.wsicon), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(VSCodeServer.treerender), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(VSCodeServer.can_display), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(VSCodeServer.wsicon), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(VSCodeServer.treerender), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Base.print_to_string), Type, Vararg{Any}})
precompile(Tuple{typeof(VSCodeServer.can_display), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Array{Float64, 1}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Array{Float64, 1}})
precompile(Tuple{typeof(VSCodeServer.treerender), Array{Float64, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base._show_type), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(VSCodeServer.can_display), Array{Float64, 1}})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(VSCodeServer.unwrap), VSCodeServer.Wrapper})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, VSCodeServer.ReplRunCodeRequestReturn}}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, String, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{Type{VSCodeServer.JSON.Writer.CompositeTypeWrapper{T} where T}, VSCodeServer.ReplRunCodeRequestReturn, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(VSCodeServer.JSON.Writer.show_pair), VSCodeServer.JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, VSCodeServer.JSON.Serializations.StandardSerialization, Symbol, Nothing})
precompile(Tuple{VSCodeServer.var"#57#61"{VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{VSCodeServer.var"#58#62"{Bool, Bool, Bool, Module, String, Int64, Int64, String, VSCodeServer.ReplRunCodeRequestParams}})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.var"#repeat##kw", NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:bins, :weights), T} where T<:Tuple}, Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{Plots.var"#histogram##kw", Any, typeof(Plots.histogram), Any})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:bins, :weights), Tuple{Symbol, Array{Int64, 1}}}})
precompile(Tuple{Plots.var"##histogram#404", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Plots.histogram), Any})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:bins, :weights), Tuple{Symbol, Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:bins, :weights), Tuple{Symbol, Array{Int64, 1}}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:bins, :weights, :seriestype), Tuple{Symbol, Array{Int64, 1}, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{DataType, Nothing, Array{Float64, 1}, Nothing}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Float64, 1}, Nothing, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64, Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, Symbol}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{typeof(Plots.slice_arg), Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:formatter,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:formatter,), Tuple{Symbol}}})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:formatter,), Tuple{Symbol}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Plots.var"#font##kw", NamedTuple{(:family, :pointsize, :valign, :halign, :rotation, :color), Tuple{String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Plots.font)})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:histogram}}, Any, Any, Any})
precompile(Tuple{typeof(Base.:(>)), Int64, Float64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict, Symbol, Any})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasEltype, Base.HasLength})
precompile(Tuple{typeof(Base.:(==)), Nothing, Bool})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Plots.check_contour_levels), Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:barhist}}, Any, Any, Any})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Array{Int64, 1}}})
precompile(Tuple{Plots.var"#_make_hist##kw", NamedTuple{(:normed, :weights), Tuple{Bool, Array{Int64, 1}}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics._mean), typeof(Base.identity), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), Statistics.var"#8#9"{Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(StatsBase.histrange), Array{Float64, 1}, Int64, Symbol})
precompile(Tuple{StatsBase.var"##s129#129", Any, Any, Any})
precompile(Tuple{StatsBase.var"##fit#148", Symbol, typeof(StatsBase.fit), Type{StatsBase.Histogram{Int64, N, E} where E where N}, Tuple{Array{Float64, 1}}, StatsBase.Weights{Int64, Int64, Array{Int64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{Type{AbstractArray{Float64, 1}}, Array{Int64, 1}})
precompile(Tuple{StatsBase.var"##s128#154", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr}})
precompile(Tuple{Base.Cartesian.var"#@nref", LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{StatsBase.var"##s129#152", Any, Any, Any, Any})
precompile(Tuple{StatsBase.var"##s129#130", Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{typeof(Base.promote_type), Type})
precompile(Tuple{StatsBase.var"##normalize!#153", Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:barbins}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_binlike), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, Plots.var"#193#195"{Float64}}})
precompile(Tuple{typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._bin_centers), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:bar}}, Any, Any, Any})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#186#189"{Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, Plots.var"#186#189"{Plots.Axis}}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.isnan), Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Vararg{Float64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.copy), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Symbol, 1}, Tuple{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}}})
precompile(Tuple{typeof(Base.filter!), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), Base.var"#115#116"{typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{Type{RecipesBase.RecipeData}, RecipesPipeline.DefaultsDict, Tuple{}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Vararg{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#12#15", Base.BottomRF{typeof(Base.min)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{Base.MappingRF{Plots.var"#7#11", Base.MappingRF{Plots.var"#13#16", Base.BottomRF{typeof(Base.max)}}}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), T} where T<:Tuple}, Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, String, Bool}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, String, Bool}}, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, String, Bool}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, String, Bool}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, Plots.var"#7#11"}, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Int64, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Int64, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Int64, Base.RefValue{Base.Val{2}}}}})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths), T} where T<:Tuple}, Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:vmax, :vmin), T} where T<:Tuple}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64}}, NamedTuple{(:vmax, :vmin), Tuple{Float64, Float64}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths, :vmax, :vmin), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, Float64, Float64}}, PyCall.PyObject, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths, :vmax, :vmin), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, Float64, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths, :vmax, :vmin), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, Float64, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:color, :linestyle, :linewidth, :alpha), T} where T<:Tuple}, Tuple{Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, String, Float64, Float64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, String, Float64, Float64}}, PyCall.PyObject, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}, 1}, Pair{String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}, 1}, Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, String, Float64, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, String})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.py_set_spine_color), PyCall.PyObject, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{PyCall.PyObject, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:axis, :which, :colors, :labelcolor), T} where T<:Tuple}, Tuple{String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(VSCodeServer.safe_render), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(VSCodeServer.JSONRPC.send_success_response), VSCodeServer.JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, VSCodeServer.ReplRunCodeRequestReturn})
precompile(Tuple{RecipesBase.var"#@layout", LineNumberNode, Module, Expr})
precompile(Tuple{typeof(RecipesBase.create_grid), Expr})
precompile(Tuple{RecipesBase.var"#3#4", Tuple{Int64, Expr}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, RecipesBase.var"#1#2"}})
precompile(Tuple{RecipesBase.var"#1#2", Tuple{Int64, Symbol}})
precompile(Tuple{RecipesBase.var"#1#2", Tuple{Int64, Expr}})
precompile(Tuple{RecipesBase.var"#3#4", Tuple{Int64, Symbol}})
precompile(Tuple{Type{Array{T, 2} where T}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :width, :height), T} where T<:Tuple}, Tuple{Symbol, Symbol, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 2}, NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Float64}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :blank), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 2}, NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 2}, Array{Any, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.randn), Int64, Int64})
precompile(Tuple{typeof(Base.hcat), Symbol, Symbol, Symbol, Vararg{Symbol}})
precompile(Tuple{Type{NamedTuple{(:layout, :t, :leg, :ticks, :border), T} where T<:Tuple}, Tuple{Array{Any, 2}, Array{Symbol, 2}, Bool, Nothing, Symbol}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Array{Any, 2}, Array{Symbol, 2}, Bool, Nothing, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 2}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Plots.treats_y_as_x), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Array{Symbol, 2}})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(Base.in), Array{Symbol, 2}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.size), Array{Symbol, 2}, Int64})
precompile(Tuple{Type{Array{RecipesBase.RecipeData, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.axes), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Symbol, 2}, Base.UnitRange{Int64}, Function})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.setindex!), Array{RecipesBase.RecipeData, 1}, RecipesBase.RecipeData, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, AbstractArray{T, 2} where T})
precompile(Tuple{typeof(RecipesPipeline.is3d), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 2}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#33#34"{Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.isempty), Array{Any, 2}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 2}, Symbol})
precompile(Tuple{typeof(Plots.layout_args), Array{Any, 2}})
precompile(Tuple{typeof(Plots.layout_args), NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Float64}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.EmptyLayout, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Plots.layout_args), NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}}})
precompile(Tuple{typeof(Plots.calc_num_subplots), Plots.EmptyLayout})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.GridLayout, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Float64, Int64})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:ticks,), Tuple{Nothing}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:line}}, Any, Any, Any})
precompile(Tuple{typeof(Base.sortperm), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{Plots.var"#_make_hist##kw", NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
precompile(Tuple{Statistics.var"#_quantile##kw", NamedTuple{(:alpha, :beta), Tuple{Float64, Float64}}, typeof(Statistics._quantile), Array{Float64, 1}, Float64})
precompile(Tuple{StatsBase.var"##fit#146", Symbol, typeof(StatsBase.fit), Type{StatsBase.Histogram{Int64, N, E} where E where N}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#186#189"{Plots.Axis}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, Plots.var"#186#189"{Plots.Axis}}})
precompile(Tuple{typeof(Base.sort), Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.filter), Plots.var"#187#190", Array{Int64, 1}})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Plots.py_handle_surface), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.isempty), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Base.UnitRange{Int64}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#558#568"{Base.UnitRange{Int64}}, Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :dash_capstyle, :drawstyle), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, String, String}}, PyCall.PyObject, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.py_handle_surface), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.isempty), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.NaNSegmentsIterator}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.var"#84#85"{Plots.var"#20#21"{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), Plots.var"#20#21"{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.warn_on_attr_dim_mismatch), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Nothing, Base.Generator{Array{Any, 1}, Plots.var"#7#11"}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :marker, :s, :facecolors, :edgecolors, :linewidths, :vmax, :vmin), Tuple{String, Float64, String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, Float64, Float64}}, PyCall.PyObject, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Plots.var"#558#568"{Base.UnitRange{Int64}}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, Plots.var"#558#568"{Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.iterate), PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}})
precompile(Tuple{typeof(Plots.py_set_ticks), Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject, Nothing, Symbol})
precompile(Tuple{Type{NamedTuple{(:left, :right, :bottom, :top, :labelleft, :labeltop, :labelbottom, :labelright), T} where T<:Tuple}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:which,), Tuple{String}}, NamedTuple{(:left, :right, :bottom, :top, :labelleft, :labeltop, :labelbottom, :labelright), Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:which, :left, :right, :bottom, :top, :labelleft, :labeltop, :labelbottom, :labelright), Tuple{String, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:which, :left, :right, :bottom, :top, :labelleft, :labeltop, :labelbottom, :labelright), Tuple{String, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, String}, 1}, Pair{String, Bool}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:which, :left, :right, :bottom, :top, :labelleft, :labeltop, :labelbottom, :labelright), Tuple{String, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.py_bbox), Array{Any, 1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.GridLayout})
precompile(Tuple{typeof(Plots.rightpad), Plots.GridLayout})
precompile(Tuple{typeof(Plots.bottompad), Plots.GridLayout})
precompile(Tuple{typeof(Plots.toppad), Plots.GridLayout})
precompile(Tuple{Base.BottomRF{typeof(Base.min)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Int64})
precompile(Tuple{typeof(VSCodeServer.wsicon), Array{Any, 2}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Array{Any, 2}})
precompile(Tuple{typeof(VSCodeServer.treerender), Array{Any, 2}})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Tuple{Int64, Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Int64}, Char})
precompile(Tuple{typeof(VSCodeServer.can_display), Array{Any, 2}})
precompile(Tuple{typeof(Plots.fakedata), Int64, Int64})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{typeof(Random.seed!), Random.TaskLocalRNG, Array{UInt32, 1}})
precompile(Tuple{typeof(Plots.fakedata), Random.TaskLocalRNG, Int64, Vararg{Int64}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Function})
precompile(Tuple{typeof(Base.vec), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.randn), Random.TaskLocalRNG, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Array{Float64, 1}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Symbol, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PlotUtils.cgrad), Tuple{Array{Symbol, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(PlotUtils.cgrad), Tuple{Array{Symbol, 2}}}})
precompile(Tuple{PlotUtils.var"##cgrad#18", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}})
precompile(Tuple{Type{NamedTuple{(:layout, :palette, :bg_inside), T} where T<:Tuple}, Tuple{Int64, Array{PlotUtils.ContinuousColorGradient, 2}, Array{Symbol, 2}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{PlotUtils.ContinuousColorGradient, 2}, Array{Symbol, 2}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{PlotUtils.ContinuousColorGradient, 2}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{PlotUtils.ContinuousColorGradient, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{PlotUtils.ContinuousColorGradient, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ContinuousColorGradient, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Array{Float64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), PlotUtils.ContinuousColorGradient, Float64, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{ColorTypes.RGBA{Float64}}, Base.Generator{Array{Float64, 1}, PlotUtils.var"#6#7"{PlotUtils.ContinuousColorGradient}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{Float64, 1}, PlotUtils.var"#6#7"{PlotUtils.ContinuousColorGradient}}, Int64})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Float64})
precompile(Tuple{typeof(PlotUtils.palette), Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{Base64.var"#3#4"{Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:aspect_ratio,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Plots.var"#heatmap##kw", Any, typeof(Plots.heatmap), Any})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:aspect_ratio,), Tuple{Int64}}})
precompile(Tuple{Plots.var"##heatmap#416", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(Plots.heatmap), Any})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:aspect_ratio,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:aspect_ratio,), Tuple{Int64}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.wrap_surfaces!), Any, AbstractArray{T, 1} where T, AbstractArray{T, 1} where T, RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, RecipesPipeline.Surface{var"#s30"} where var"#s30"<:(AbstractArray{var"#s21", 2} where var"#s21"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}), Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.OneTo{Int64}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), RecipesPipeline.Surface{Array{Float64, 2}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 2}, Base.Generator{Array{Float64, 2}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._replace!), RecipesPipeline.var"#21#22", Array{Float64, 2}, Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.length), Array{Base.OneTo{Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{RecipesPipeline.Surface{Array{Float64, 2}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.OneTo{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{RecipesPipeline.Surface{Array{Float64, 2}}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{Array{Float64, 2}}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, RecipesPipeline.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base._collect), Base.OneTo{Int64}, Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#7#8"{Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.OneTo{Int64}, Type{Float64}, Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#7#8"{Symbol}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.OneTo{Int64}, RecipesPipeline.var"#7#8"{Symbol}}, Int64})
precompile(Tuple{typeof(Plots._heatmap_edges), Array{Float64, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Float64, 1}, Float64})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ContinuousColorGradient})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, PlotUtils.ContinuousColorGradient})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.update_clims), Float64, Float64, RecipesPipeline.Surface{Array{Float64, 2}}, Function})
precompile(Tuple{typeof(Plots.update_clims), Float64, Float64, Array{Float64, 2}, typeof(Plots.ignorenan_extrema)})
precompile(Tuple{typeof(Plots.py_handle_surface), RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.size), Array{Float64, 2}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.OneTo{Int64}, Symbol, Base.OneTo{Int64}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.py_mask_nans), Array{Float64, 2}})
precompile(Tuple{typeof(PyCall.pycall), PyCall.PyObject, Type{Any}, Array{Float64, 2}})
precompile(Tuple{PlotUtils.var"#cgrad##kw", NamedTuple{(:alpha,), Tuple{Nothing}}, typeof(PlotUtils.cgrad), PlotUtils.ContinuousColorGradient})
precompile(Tuple{PlotUtils.var"#cgrad##kw", NamedTuple{(:alpha,), Tuple{Nothing}}, typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Plots.py_color), Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Array{Tuple{Float64, Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Tuple{Float64, Float64, Float64, Float64}, 1}}}})
precompile(Tuple{PyCall.PyObject, String, Vararg{Any}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Array{Tuple{Float64, Tuple{Float64, Float64, Float64, Float64}}, 1}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.ColorMap}, PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyPlot.ColorMap, String})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:color, :alpha), Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}, PyCall.PyObject})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Tuple{Int64, Int64, Int64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, Tuple{Int64, Int64, Int64, Float64}}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Tuple{Int64, Int64, Int64, Float64}}, 1}, Pair{String, Tuple{Int64, Int64, Int64, Float64}}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :alpha), Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, Tuple{Int64, Int64, Int64, Float64}}, 1}, Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :alpha), Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Int64, Int64, Int64, Float64}, String})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Int64, Int64, Int64, Float64}})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :cmap, :alpha), T} where T<:Tuple}, Tuple{String, Int64, PyPlot.ColorMap, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:label, :zorder, :cmap, :alpha), Tuple{String, Int64, PyPlot.ColorMap, Nothing}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:label, :zorder, :cmap, :alpha), Tuple{String, Int64, PyPlot.ColorMap, Nothing}}, NamedTuple{(:vmax, :vmin), Tuple{Float64, Float64}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:label, :zorder, :cmap, :alpha, :vmax, :vmin), Tuple{String, Int64, PyPlot.ColorMap, Nothing, Float64, Float64}}, PyCall.PyObject, Array{Float64, 1}, Array{Float64, 1}, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, String}, 1}, Pair{String, String}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :cmap, :alpha, :vmax, :vmin), Tuple{String, Int64, PyPlot.ColorMap, Nothing, Float64, Float64}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :cmap, :alpha, :vmax, :vmin), Tuple{String, Int64, PyPlot.ColorMap, Nothing, Float64, Float64}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, PyPlot.ColorMap})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, PyPlot.ColorMap, String})
precompile(Tuple{Type{PyCall.PyObject}, PyPlot.ColorMap})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:size, :pad, :label), Tuple{String, String, String}}, PyCall.PyObject, String})
precompile(Tuple{Type{NamedTuple{(:cax, :orientation), T} where T<:Tuple}, Tuple{PyCall.PyObject, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:cax, :orientation), Tuple{PyCall.PyObject, String}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:spacing,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:cax, :orientation), Tuple{PyCall.PyObject, String}}, NamedTuple{(:spacing,), Tuple{String}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:cax, :orientation, :spacing), Tuple{PyCall.PyObject, String, String}}, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, PyCall.PyObject}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, PyCall.PyObject}, 1}, Pair{String, PyCall.PyObject}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cax, :orientation, :spacing), Tuple{PyCall.PyObject, String, String}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, PyCall.PyObject}, 1}, Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:cax, :orientation, :spacing), Tuple{PyCall.PyObject, String, String}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, PyCall.PyObject, String})
precompile(Tuple{Type{NamedTuple{(:size, :family, :math_fontfamily, :color), T} where T<:Tuple}, Tuple{Int64, String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:size, :family, :math_fontfamily, :color), Tuple{Int64, String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}, PyCall.PyObject, String})
precompile(Tuple{typeof(Base._array_for), Type{Pair{String, Int64}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pair{String, Int64}, 1}, Pair{String, Int64}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:size, :family, :math_fontfamily, :color), Tuple{Int64, String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}}, PyCall.var"#105#106"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Pair{String, Int64}, 1}, Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Pair{String, B} where B, 1}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:size, :family, :math_fontfamily, :color), Tuple{Int64, String, String, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}}}}}, PyCall.var"#105#106"}, Int64, Int64})
precompile(Tuple{PyCall.PyObject, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.get_colorbar_ticks), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:anchor,), Tuple{String}}, PyCall.PyObject, Int64})
precompile(Tuple{typeof(VSCodeServer.wsicon), Array{Float64, 2}})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Array{Float64, 2}})
precompile(Tuple{typeof(VSCodeServer.treerender), Array{Float64, 2}})
precompile(Tuple{typeof(VSCodeServer.can_display), Array{Float64, 2}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#2#28", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#28", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(OhMyREPL.Prompt.refresh_multi_line), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Bool})
precompile(Tuple{typeof(Tokenize.Lexers.lex_plus), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.MIState, Any})
precompile(Tuple{typeof(Tokenize.Lexers.simple_hash), Char, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt64, Tokenize.Tokens.Kind}, UInt64})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_whitespace), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Lexers.lex_equal), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#22#48", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#48", Any, Any, Any})
precompile(Tuple{typeof(OhMyREPL._check_pass_name), OhMyREPL.PassHandler, String, Bool})
precompile(Tuple{typeof(REPL.LineEdit.move_input_end), Union{REPL.LineEdit.MIState, REPL.LineEdit.ModeState}})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{VSCodeServer.var"#66#68"{REPL.LineEditREPL, REPL.LineEdit.Prompt}, Expr})
precompile(Tuple{typeof(VSCodeServer.evalrepl), Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Tuple{}}, Int64, Int64})
precompile(Tuple{VSCodeServer.var"#70#72"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(REPL.with_repl_linfo), Any, REPL.LineEditREPL})
precompile(Tuple{REPL.var"#45#46"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{typeof(Base.Multimedia.display), VSCodeServer.InlineDisplay, Function})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/vnd.julia-vscode.diagnostics")}, Any})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Function})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Tokenize.Lexers.simple_hash), Char, UInt64})
precompile(Tuple{typeof(Base.print_to_string), Tokenize.Tokens.Kind})
precompile(Tuple{typeof(REPL.Terminals.cmove_up), REPL.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(VSCodeServer.display_repl_error), Base.TTY, VSCodeServer.EvalErrorStack})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.reverse), Base.ExceptionStack})
precompile(Tuple{typeof(Base.reverse), Base.ExceptionStack, Int64, Int64})
precompile(Tuple{typeof(Base.to_shape), Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.similar), Base.ExceptionStack, Type{Any}, Tuple{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(VSCodeServer.crop_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Base.StackTraces.stacktrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.TTY}, UndefVarError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(REPL.REPLCompletions.UndefVarError_hint), Base.IOContext{Base.TTY}, UndefVarError})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(VSCodeServer.wsicon), Nothing})
precompile(Tuple{Type{VSCodeServer.SubTree}, String, String, Nothing})
precompile(Tuple{typeof(VSCodeServer.treerender), Nothing})
precompile(Tuple{typeof(VSCodeServer.can_display), Nothing})
precompile(Tuple{OhMyREPL.BracketInserter.var"#7#14"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.PollingFileWatcher})
